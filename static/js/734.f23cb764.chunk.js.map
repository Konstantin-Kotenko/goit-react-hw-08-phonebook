{"version":3,"file":"static/js/734.f23cb764.chunk.js","mappings":"kTAGaA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iIACF,qBAAGE,MAAkBC,OAAOC,SAIrC,qBAAGF,MAAkBG,MAAMC,MAG3BC,EAAQP,EAAAA,GAAAA,MAAH,sFAMLQ,GAAQR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,4CACF,qBAAGE,MAAkBG,MAAMC,MAG9BI,EAASV,EAAAA,GAAAA,OAAH,wHACH,qBAAGE,MAAkBG,MAAMC,MAG/B,qBAAGJ,MAAkBS,QAAQC,QAI5BC,EAAYb,EAAAA,GAAAA,EAAH,uCACX,qBAAGE,MAAkBC,OAAOW,Q,mEC5B1BC,EAAW,WACtB,IAAMC,GAAcC,EAAAA,EAAAA,MAGpB,MAAO,EAFUC,EAAAA,EAAAA,MAECF,K,oJCOdG,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,QAItBC,EAAY,WACvB,OAAmBR,EAAAA,EAAAA,KAAZS,GAAP,eAYA,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAbiB,SAAAC,GACnB,IAAMC,EAAO,CACXJ,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,UAEnBH,GAASO,EAAAA,EAAAA,IAAUD,IAElB,MAOCE,iBAAkBC,EAAAA,GAHpB,SAKG,SAAAC,GAAK,OACJ,UAAC,KAAD,YACE,UAAC,KAAD,mBACQ,KACN,SAAC,KAAD,CACEC,KAAK,QACLf,KAAK,QACLgB,SAAUF,EAAMG,aAChBC,MAAOJ,EAAML,OAAOH,SAEtB,SAACP,EAAD,CAAWC,KAAK,cAGlB,UAAC,KAAD,sBACW,KACT,SAAC,KAAD,CACEe,KAAK,WACLf,KAAK,WACLgB,SAAUF,EAAMG,aAChBC,MAAOJ,EAAML,OAAOF,YAEtB,SAACR,EAAD,CAAWC,KAAK,iBAElB,SAAC,KAAD,CAAQe,KAAK,SAAb,0BCpDV,EARc,WACZ,OACE,+BACE,SAACZ,EAAD,Q,mHCHOgB,EAAqBC,EAAAA,KAAaC,MAAM,CACnDrB,KAAMoB,EAAAA,KAEHE,SAAS,cACTC,QACC,yHACA,0IAEJC,OAAQJ,EAAAA,KAELE,SAAS,gBACTC,QACC,6EACA,kGAIOV,EAAkBO,EAAAA,KAAaC,MAAM,CAChDf,MAAOc,EAAAA,KAAad,QAAQgB,WAC5Bf,SAAUa,EAAAA,KAAaK,IAAI,GAAGH,aAGnBI,EAAmBN,EAAAA,KAAaC,MAAM,CACjDrB,KAAMoB,EAAAA,KAAaE,WACnBhB,MAAOc,EAAAA,KAAad,QAAQgB,WAC5Bf,SAAUa,EAAAA,KAAaK,IAAI,GAAGH","sources":["components/ContactForm/ContactForm.styled.js","hooks/useRedux.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","schema/schema.js"],"sourcesContent":["import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormContact = styled(Form)`\n  border: 1px solid ${({ theme }) => theme.colors.black};\n  display: flex;\n  flex-direction: column;\n  width: 360px;\n  padding: ${({ theme }) => theme.space.ml};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: ${({ theme }) => theme.space.ml};\n`;\n\nexport const Button = styled.button`\n  margin-top: ${({ theme }) => theme.space.ml};\n  width: 130px;\n  border-radius: 5px;\n  border: ${({ theme }) => theme.borders.none};\n  cursor: pointer;\n`;\n\nexport const ErrorText = styled.p`\n  color: ${({ theme }) => theme.colors.red};\n`;\n","import { createSelectorHook, useDispatch } from 'react-redux';\n\nexport const useRedux = () => {\n  const useSelector = createSelectorHook();\n  const dispatch = useDispatch();\n\n  return [dispatch, useSelector];\n};\n","import { Formik, ErrorMessage } from 'formik';\nimport { useRedux } from 'hooks/useRedux';\nimport { Navigate } from 'react-router';\nimport {\n  FormContact,\n  Label,\n  ErrorText,\n  Input,\n  Button,\n} from 'components/ContactForm/ContactForm.styled';\nimport { schemaFromLogin } from 'schema/schema';\nimport { loginUser } from 'redux/authSlice';\n\nconst FormError = ({ name }) => (\n  <ErrorMessage\n    name={name}\n    render={message => <ErrorText>{message}</ErrorText>}\n  />\n);\n\nexport const LoginForm = () => {\n  const [dispatch] = useRedux();\n\n  const handleSubmit = values => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(loginUser(user));\n    // <Redirect to=\"/contacts\" />;\n    <Navigate to=\"contacts\" replace />;\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schemaFromLogin}\n    >\n      {props => (\n        <FormContact>\n          <Label>\n            Email{' '}\n            <Input\n              type=\"email\"\n              name=\"email\"\n              onChange={props.handleChange}\n              value={props.values.email}\n            />\n            <FormError name=\"email\" />\n          </Label>\n\n          <Label>\n            Password{' '}\n            <Input\n              type=\"password\"\n              name=\"password\"\n              onChange={props.handleChange}\n              value={props.values.password}\n            />\n            <FormError name=\"password\" />\n          </Label>\n          <Button type=\"submit\">Login</Button>\n        </FormContact>\n      )}\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default Login;\n","import * as yup from 'yup';\n\nexport const schemaFromContacts = yup.object().shape({\n  name: yup\n    .string()\n    .required('Enter name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .required('Enter number')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const schemaFromLogin = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\n\nexport const schemaFromSignUp = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\n"],"names":["FormContact","styled","Form","theme","colors","black","space","ml","Label","Input","Field","Button","borders","none","ErrorText","red","useRedux","useSelector","createSelectorHook","useDispatch","FormError","name","render","message","LoginForm","dispatch","initialValues","email","password","onSubmit","values","user","loginUser","validationSchema","schemaFromLogin","props","type","onChange","handleChange","value","schemaFromContacts","yup","shape","required","matches","number","min","schemaFromSignUp"],"sourceRoot":""}