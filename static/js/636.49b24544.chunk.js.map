{"version":3,"file":"static/js/636.49b24544.chunk.js","mappings":"kTAGaA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iIACF,qBAAGE,MAAkBC,OAAOC,SAIrC,qBAAGF,MAAkBG,MAAMC,MAG3BC,EAAQP,EAAAA,GAAAA,MAAH,sFAMLQ,GAAQR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,4CACF,qBAAGE,MAAkBG,MAAMC,MAG9BI,EAASV,EAAAA,GAAAA,OAAH,wHACH,qBAAGE,MAAkBG,MAAMC,MAG/B,qBAAGJ,MAAkBS,QAAQC,QAI5BC,EAAYb,EAAAA,GAAAA,EAAH,uCACX,qBAAGE,MAAkBC,OAAOW,Q,mEC5B1BC,EAAW,WACtB,IAAMC,GAAcC,EAAAA,EAAAA,MAGpB,MAAO,EAFUC,EAAAA,EAAAA,MAECF,K,oJCOdG,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,QAItBC,EAAU,WACrB,OAAmBR,EAAAA,EAAAA,KAAZS,GAAP,eAYA,OACE,SAAC,KAAD,CACEC,cAAe,CAAEL,KAAM,GAAIM,MAAO,GAAIC,SAAU,IAChDC,SAbiB,SAAAC,GACnB,IAAMC,EAAO,CACXV,KAAMS,EAAOT,KACbM,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,UAEnBH,GAASO,EAAAA,EAAAA,IAASD,IACjB,MAOCE,iBAAkBC,EAAAA,GAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,oBACO,SAAC,KAAD,CAAOC,KAAK,OAAOd,KAAK,UAC7B,SAACD,EAAD,CAAWC,KAAK,aAGlB,UAAC,KAAD,qBACQ,SAAC,KAAD,CAAOc,KAAK,QAAQd,KAAK,WAC/B,SAACD,EAAD,CAAWC,KAAK,cAGlB,UAAC,KAAD,wBACW,SAAC,KAAD,CAAOc,KAAK,WAAWd,KAAK,cACrC,SAACD,EAAD,CAAWC,KAAK,iBAElB,SAAC,KAAD,CAAQc,KAAK,SAAb,0BC5CR,EARe,WACb,OACE,+BACE,SAACX,EAAD,Q,mHCHOY,EAAqBC,EAAAA,KAAaC,MAAM,CACnDjB,KAAMgB,EAAAA,KAEHE,SAAS,cACTC,QACC,yHACA,0IAEJC,OAAQJ,EAAAA,KAELE,SAAS,gBACTC,QACC,6EACA,kGAIOE,EAAkBL,EAAAA,KAAaC,MAAM,CAChDX,MAAOU,EAAAA,KAAaV,QAAQY,WAC5BX,SAAUS,EAAAA,KAAaM,IAAI,GAAGJ,aAGnBL,EAAmBG,EAAAA,KAAaC,MAAM,CACjDjB,KAAMgB,EAAAA,KAAaE,WACnBZ,MAAOU,EAAAA,KAAaV,QAAQY,WAC5BX,SAAUS,EAAAA,KAAaM,IAAI,GAAGJ","sources":["components/ContactForm/ContactForm.styled.js","hooks/useRedux.js","components/SignUp/SignUp.jsx","pages/SignUp/SignUp.jsx","schema/schema.js"],"sourcesContent":["import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormContact = styled(Form)`\n  border: 1px solid ${({ theme }) => theme.colors.black};\n  display: flex;\n  flex-direction: column;\n  width: 360px;\n  padding: ${({ theme }) => theme.space.ml};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: ${({ theme }) => theme.space.ml};\n`;\n\nexport const Button = styled.button`\n  margin-top: ${({ theme }) => theme.space.ml};\n  width: 130px;\n  border-radius: 5px;\n  border: ${({ theme }) => theme.borders.none};\n  cursor: pointer;\n`;\n\nexport const ErrorText = styled.p`\n  color: ${({ theme }) => theme.colors.red};\n`;\n","import { createSelectorHook, useDispatch } from 'react-redux';\n\nexport const useRedux = () => {\n  const useSelector = createSelectorHook();\n  const dispatch = useDispatch();\n\n  return [dispatch, useSelector];\n};\n","import {\n  FormContact,\n  Label,\n  ErrorText,\n  Input,\n  Button,\n} from 'components/ContactForm/ContactForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport { schemaFromSignUp } from 'schema/schema';\nimport { useRedux } from 'hooks/useRedux';\nimport { authUser } from 'redux/authSlice';\nimport { Navigate } from 'react-router';\n\nconst FormError = ({ name }) => (\n  <ErrorMessage\n    name={name}\n    render={message => <ErrorText>{message}</ErrorText>}\n  />\n);\n\nexport const SignUpp = () => {\n  const [dispatch] = useRedux();\n\n  const handleSubmit = values => {\n    const user = {\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(authUser(user));\n    <Navigate to=\"contacts\" replace={true} />;\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schemaFromSignUp}\n    >\n      <FormContact>\n        <Label>\n          Name <Input type=\"name\" name=\"name\" />\n          <FormError name=\"name\" />\n        </Label>\n\n        <Label>\n          Email <Input type=\"email\" name=\"email\" />\n          <FormError name=\"email\" />\n        </Label>\n\n        <Label>\n          Password <Input type=\"password\" name=\"password\" />\n          <FormError name=\"password\" />\n        </Label>\n        <Button type=\"submit\">SignUp</Button>\n      </FormContact>\n    </Formik>\n  );\n};\n","import { SignUpp } from 'components/SignUp/SignUp';\n\nconst SignUp = () => {\n  return (\n    <>\n      <SignUpp />\n    </>\n  );\n};\n\nexport default SignUp;\n","import * as yup from 'yup';\n\nexport const schemaFromContacts = yup.object().shape({\n  name: yup\n    .string()\n    .required('Enter name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .required('Enter number')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const schemaFromLogin = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\n\nexport const schemaFromSignUp = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\n"],"names":["FormContact","styled","Form","theme","colors","black","space","ml","Label","Input","Field","Button","borders","none","ErrorText","red","useRedux","useSelector","createSelectorHook","useDispatch","FormError","name","render","message","SignUpp","dispatch","initialValues","email","password","onSubmit","values","user","authUser","validationSchema","schemaFromSignUp","type","schemaFromContacts","yup","shape","required","matches","number","schemaFromLogin","min"],"sourceRoot":""}